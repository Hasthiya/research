var Cordinates = [];
var drawLeftWindow = false;
var drawRightWindow = false;
var drawTopWindow = false;
var drawBottomWindow = false;
var CordinatesWithName = [];
var Treemap = {};
(function () {
    Treemap.generate = function () {
        function q(a, b, c, e) {
            this.xoffset = a;
            this.yoffset = b;
            this.height = e;
            this.width = c;
            this.shortestEdge = function () {
                return Math.min(this.height, this.width)
            };
            this.getCoordinates = function (a) {
                var b = [], c = this.xoffset, f = this.yoffset, m = l(a) / this.height, e = l(a) / this.width, d;
                if (this.width >= this.height) for (d = 0; d < a.length; d++) b.push([c, f, c + m, f + a[d] / m]), f += a[d] / m; else for (d = 0; d < a.length; d++) b.push([c, f, c + a[d] / e, f + e]), c += a[d] / e;
                return b
            };
            this.cutArea = function (a) {
                this.width >= this.height ?
                    (a /= this.height, a = new q(this.xoffset + a, this.yoffset, this.width - a, this.height)) : (a /= this.width, a = new q(this.xoffset, this.yoffset + a, this.width, this.height - a));
                return a
            }
        }

        function r(a, b, c, e, h) {
            var e = "undefined" === typeof e ? 0 : e, h = "undefined" === typeof h ? 0 : h, d = [], i = [], f;
            if (a[0] && a[0].constructor === Array) {
                for (f = 0; f < a.length; f++) d[f] = k(a[f]);
                b = g(d, b, c, e, h);
                for (f = 0; f < a.length; f++) i.push(r(a[f], b[f][2] - b[f][0], b[f][3] - b[f][1], b[f][0], b[f][1]))
            } else i = g(a, b, c, e, h);
            return i
        }

        function g(a, b, c, e, h) {
            for (var e = "undefined" ===
            typeof e ? 0 : e, h = "undefined" === typeof h ? 0 : h, p = d, i = b * c, f = [], m = l(a), i = i / m, m = 0; m < a.length; m++) f[m] = a[m] * i;
            a = p(f, [], new q(e, h, b, c), []);
            b = [];
            for (c = 0; c < a.length; c++) for (e = 0; e < a[c].length; e++) b.push(a[c][e]);
            return b
        }

        function d(a, b, c, e) {
            var h, p;
            if (0 === a.length) e.push(c.getCoordinates(b)); else {
                h = c.shortestEdge();
                p = a[0];
                var i;
                var f;
                0 === b.length ? i = !0 : (f = b.slice(), f.push(p), i = j(b, h), h = j(f, h), i = i >= h);
                i ? (b.push(p), d(a.slice(1), b, c, e)) : (p = c.cutArea(l(b), e), e.push(c.getCoordinates(b)), d(a, [], p, e));
                return e
            }
        }

        function j(a,
                   b) {
            var c = Math.min.apply(Math, a), d = Math.max.apply(Math, a), h = l(a);
            return Math.max(Math.pow(b, 2) * d / Math.pow(h, 2), Math.pow(h, 2) / (Math.pow(b, 2) * c))
        }

        function l(a) {
            var b = 0, c;
            for (c = 0; c < a.length; c++) b += a[c];
            return b
        }

        function k(a) {
            var b, c = 0;
            if (a[0] && a[0].constructor === Array) for (b = 0; b < a.length; b++) c += k(a[b]); else c = l(a);
            return c
        }

        return r
    }()
})();
(function () {
    Treemap.draw = function () {
        function q(g, d) {
            for (var j in d) d.hasOwnProperty(j) && (g[j] = d[j]);
            return g
        }

        function r(g, d, j, l, k) {
            var a, b, c;
            if (d[0][0] && d[0][0].constructor === Array) for (a = 0; a < d.length; a++) b = k.slice(), b.push(a), r(g, d[a], j, l, b); else for (a = 0; a < d.length; a++) {
                b = k.slice();
                b.push(a);
                c = j;
                for (g = 0; g < b.length; g++) c = c[b[g]];
                l.draw(d[a], c, b)
            }
        }

        return function (g, d, j, l, k, a) {
            var b, c, e, a = "undefined" === typeof a ? [] : a;
            c = function () {
                function a(b) {
                    var c, d = 0;
                    if (b[0] && b[0].constructor === Array) for (c = 0; c < b.length; c++) d +=
                        a(b[c]); else for (c = 0; c < b.length; c++) d += b[c].length;
                    return d
                }

                function b(a) {
                    var c, d = 0;
                    if (a[0] && a[0].constructor === Array) for (c = 0; c < a.length; c++) d += b(a[c]); else for (c = 0; c < a.length; c++) d += 1;
                    return d
                }

                var c = a(k) / b(k);
                return function (a) {
                    a = Math.pow((a[2] - a[0]) * (a[3] - a[1]), 0.5);
                    return {fill: "#FCFCFC", "font-size": Math.min(a / c, 20)}
                }
            }();
            e = function () {
                return function (d, e, i) {
                    var f = d[0], g = d[1], j = d[2], l = d[3], k, n, o;
                    k = b.rect(f, g, j - f, l - g);
                    if (Cordinates.length == 6) {
                        Cordinates = [];
                    };
                    if (CordinatesWithName.length == 6){
                        CordinatesWithName = [];
                    };
                    var houseCordinates = [0,0,b.width, b.height];
                    /////////////////////x y x1 y1
                    var RectCordinate = [f, g, j , l ];
                    Cordinates.push(RectCordinate);
                    console.log(Cordinates);

                    //checking room possition
                    if(houseCordinates[0] == Math.round(RectCordinate[0])){
                        drawLeftWindow = true;
                    } else {
                        drawLeftWindow = false;
                    }
                    if(houseCordinates[1] == Math.round(RectCordinate[1])){
                        drawTopWindow = true;
                    } else {
                        drawTopWindow = false;
                    }
                    if(houseCordinates[2] == Math.round(RectCordinate[2])){
                        drawRightWindow = true;
                    } else {
                        drawRightWindow = false;
                    }
                    if(houseCordinates[3] == Math.round(RectCordinate[3])){
                        drawBottomWindow = true;
                    } else {
                        drawBottomWindow = false;
                    }

                    var RectCordinatesWithName = [f, g, j , l , e,drawLeftWindow,drawTopWindow,drawRightWindow,drawBottomWindow];
                    CordinatesWithName.push(RectCordinatesWithName);

                    // key = b.rect(j - f, l - g, f, g);
                    n = a.box && a.box.constructor === Function ? a.box(d, i) : a.box;
                    o = ["hsb(0,1,0.4)", "hsb(0.2,1,0.4)",
                        "hsb(0.4,1,0.4)", "hsb(0.6,1,0.4)", "hsb(0.8,1,0.4)"];
                    n = q({stroke: "FEFEFE", fill: 1 === i.length ? o[2] : o[(i[0] + 2) % 5]}, n);
                    "fill-opacity" in n && (o = Raphael.getRGB(n.fill), o.error || (n.fill = "rgba(" + o.r + "," + o.g + "," + o.b + "," + n["fill-opacity"] + ")"));
                    k.attr(n);
                    e = b.text((f + j) / 2, (g + l) / 2, e);
                    k = a.label && a.label.constructor === Function ? a.label(d, i) : a.label;
                    k = q(c(d, i), k);
                    e.attr(k);
                    e.getBBox().width > j - f && e.getBBox().width <= l - g && e.rotate(-90)
                }
            }();
            a.background = "undefined" === typeof a.background ? {} : a.background;
            a.label = "undefined" ===
            typeof a.label ? {} : a.label;
            a.box = "undefined" === typeof a.box ? {} : a.box;
            a.draw = "undefined" === typeof a.draw ? e : a.draw;
            b = new Raphael(g, d, j);
            b.rect(0, 0, d, j).attr(a.background);
            g = Treemap.generate(l, d, j);
            r(b, g, k, a, [])
            var i;
            var sideWindowWidth = 20;
            var sideWindowHeight = 5;
            var topBottomWindowWidth = 10;
            var topBottomWindowHeight = 20;
            var kitchenDoorAdded  = false;
            var livingRoomDoorAdded = false;

            for (i = 0; i < Cordinates.length; i++) {
                var x1 = Cordinates[i][0];
                var y1 = Cordinates[i][1];
                var x2 = Cordinates[i][2];
                var y2 = Cordinates[i][3];


                // b.rect(((x2-x1) / 2 + x1) - 20, y2 - 5 , 40, 10);

                //Living Room outer Door generation
                if(CordinatesWithName[i][4] == "Living Room"){
                    console.log("Living Room");
                    if(CordinatesWithName[i][6]){
                        b.rect(((x2-x1) / 2 + x1) - 20, y1 - 5 , 40, 10);
                    } else if(CordinatesWithName[i][7]){
                        b.rect(x2 - 5, ((y2-y1) / 2 + y1) - 20 , 10, 40);
                    } else if(CordinatesWithName[i][8]){
                        b.rect(((x2-x1) / 2 + x1) - 20, y2 - 5 , 40, 10);
                    } else if(CordinatesWithName[i][5]){
                        b.rect(x1 - 5, ((y2-y1) / 2 + y1) - 20 , 10, 40);
                    }
                }

                //Kitchen outer Door generation
                if(CordinatesWithName[i][4] == "Kitchen"){
                    console.log("Kitchen");
                    if(CordinatesWithName[i][6]){
                        b.rect(((x2-x1) / 2 + x1) - 20, y1 - 5 , 40, 10);
                    } else if(CordinatesWithName[i][7]){
                        b.rect(x2 - 5, ((y2-y1) / 2 + y1) - 20 , 10, 40);
                    } else if(CordinatesWithName[i][8]){
                        b.rect(((x2-x1) / 2 + x1) - 20, y2 - 5 , 40, 10);
                    } else if(CordinatesWithName[i][5]){
                        b.rect(x1 - 5, ((y2-y1) / 2 + y1) - 20 , 10, 40);
                    }
                }

                //Window Generation
                if(CordinatesWithName[i][4] != "Bathroom") {
                    if (CordinatesWithName[i][5]) {
                        if ((y2 - y1) > 150) {
                            b.rect(x1, ((y2 - y1) / 4 + y1) - sideWindowWidth / 2, sideWindowHeight, sideWindowWidth);
                            b.rect(x1, ((y2 - y1) * (3 / 4) + y1) - sideWindowWidth / 2, sideWindowHeight, sideWindowWidth);
                        } else {
                            b.rect(x1, ((y2 - y1) / 2 + y1) - sideWindowWidth / 2, sideWindowHeight, sideWindowWidth);
                        }
                    }
                    if (CordinatesWithName[i][6]) {
                        if ((x2 - x1) > 150) {
                            b.rect((x2 - x1) / 4 + x1, y1 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                            b.rect((x2 - x1) * (3 / 4) + x1, y1 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                        } else {
                            b.rect((x2 - x1) / 2 + x1, y1 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                        }
                    }
                    if (CordinatesWithName[i][7]) {
                        if ((y2 - y1) > 150) {
                            b.rect((x2) - sideWindowHeight, ((y2 - y1) / 4 + y1), sideWindowHeight, sideWindowWidth);
                            b.rect((x2) - sideWindowHeight, ((y2 - y1) * (3 / 4) + y1), sideWindowHeight, sideWindowWidth);
                        } else {
                            b.rect((x2) - sideWindowHeight, ((y2 - y1) / 2 + y1), sideWindowHeight, sideWindowWidth);
                        }
                    }
                    if (CordinatesWithName[i][8]) {
                        if ((x2 - x1) > 150) {
                            b.rect((x2 - x1) / 4 + x1, y2 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                            b.rect((x2 - x1) * (3 / 4) + x1, y2 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                        } else {
                            b.rect((x2 - x1) / 2 + x1, y2 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                        }
                    }
                } else {
                    if (CordinatesWithName[i][5]) {
                            b.rect(x1, ((y2 - y1) / 2 + y1) - sideWindowWidth / 2, sideWindowHeight, sideWindowWidth);
                    }
                    if (CordinatesWithName[i][6]) {
                            b.rect((x2 - x1) / 2 + x1, y1 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);
                    }
                    if (CordinatesWithName[i][7]) {
                            b.rect((x2) - sideWindowHeight, ((y2 - y1) / 2 + y1), sideWindowHeight, sideWindowWidth);
                    }
                    if (CordinatesWithName[i][8]) {
                            b.rect((x2 - x1) / 2 + x1, y2 - topBottomWindowWidth / 2, topBottomWindowHeight, topBottomWindowWidth);

                    }
                }

                if (CordinatesWithName.length != i + 1) {

                    var X = CordinatesWithName[i][0];
                    var X1 = CordinatesWithName[i][2];
                    var X2 = CordinatesWithName[i + 1][0];
                    var X3 = CordinatesWithName[i + 1][2];
                    var Y = CordinatesWithName[i][1];
                    var Y1 = CordinatesWithName[i][3];
                    var Y2 = CordinatesWithName[i + 1][1];
                    var Y3 = CordinatesWithName[i + 1][3];

                    //Inside door generation
                    if ((Y1 == Y2)) {
                        //console.log("intercept detected" + CordinatesWithName[i][3] + CordinatesWithName[i+1][1]);
                        if ((40 + X2) < X1 && X3 > (X + 40)) {
                            if (X2 >= X) {
                                b.rect(((X1 - X2) / 2) + X2 - 20, Y1 - 5, 40, 10);
                                console.log("incert door");
                            } else {
                                b.rect(((X3 - X) / 2) + X - 20, Y1 - 5, 40, 10);
                            }
                            //b.rect(200, 200 , 40, 10);

                        }
                    }
                    if ((X1 == X2)) {
                        //console.log("intercept detected" + CordinatesWithName[i][3] + CordinatesWithName[i+1][1]);
                        if ((Y1 > Y2 + 40) && (Y3 > Y + 40)) {
                            if (Y >= Y2) {
                               // b.rect(((Y3 - Y) / 2) + Y - 20, Y - 5, 10, 40);
                                b.rect( X1 - 5,((Y3 - Y) / 2) + Y - 20, 10, 40);
                                console.log("incert door");
                            }
                            //b.rect(200, 200 , 40, 10);

                        }
                    }
                }
            }
        }
    }()
})();
